load(to_poly_solve)$

infix("∘")$
"∘"(f, g) := block([], v: new_variable('general), 
                    buildq([expr: expand(f(g(rat(v)))), v: v], lambda([v], expr)))$

deal(i) := -i - 1;
cut[n](i) := i - n;
increment[n](i) := i * n;

parse(l) := block([], if sequal(split(l)[1], "cut") then return(cut[parse_string(split(l)[2])]),
            if sequal(split(l)[1], "deal") then (
              if sequal(split(l)[3], "increment") then return(increment[parse_string(split(l)[4])]),
              return(deal)
            ))$

(f: identity, while (l : readline(stdin)) # false do f: parse(l) ∘ f)$

postfix("⁻¹")$
"⁻¹"(g) := block([], v: new_variable('general), 
                    buildq([expr: ev(x, solve(v = g(x), x)), v: v], lambda([v], expr)))$


log2(x) := log(x) / log(2)$
infix("°")$
"°"(f, n) := "°"[f, n]$
"°"[f, n] := block([],
            if (n = 1) then return(f),
            if (n = 2) then return(f ∘ f),
            if (mod(float(log2(n)), 1) = 0.0) then return((f°(2^(floor(float(log2(n))) - 1)))°2),
            return((f°(2^floor(float(log2(n))))) ∘ (f°(n-(2^floor(float(log2(n))))))))$


modulus: 119315717514047$ /* number of cards */
(f⁻¹°101741582076661)(rat(2020));
